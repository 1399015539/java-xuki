<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zsy.xuki.mapper.LiteratureDataMapper" >
  <resultMap id="BaseResultMap" type="com.zsy.xuki.entity.LiteratureData" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="university" property="university" jdbcType="VARCHAR" />
    <result column="foreword" property="foreword" jdbcType="VARCHAR" />
    <result column="special" property="special" jdbcType="VARCHAR" />
    <result column="down_num" property="downNum" jdbcType="INTEGER" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from literature_data
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zsy.xuki.entity.LiteratureData" >
    insert into literature_data (id, name, author,
      university, foreword, special,
      down_num)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR},
      #{university,jdbcType=VARCHAR}, #{foreword,jdbcType=VARCHAR}, #{special,jdbcType=VARCHAR},
      #{downNum,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.zsy.xuki.entity.LiteratureData" >
    update literature_data
    set name = #{name,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      university = #{university,jdbcType=VARCHAR},
      foreword = #{foreword,jdbcType=VARCHAR},
      special = #{special,jdbcType=VARCHAR},
      down_num = #{downNum,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, name, author, university, foreword, special, down_num
    from literature_data
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" parameterType="Map" >
    select id, name, author, university, foreword, special, down_num
    from literature_data where 1 = 1
    <if test="name != null">
      and name like '%${name}%'
    </if>
    <if test="author != null">
      and author like '%${author}%'
    </if>
    <if test="university != null">
      and university like '%${university}%'
    </if>
    <if test="sortDownNum != null">
      order by down_num desc
    </if>
    <if test="offset != null and pageSize != null">
      limit #{offset},#{pageSize}
    </if>
  </select>
  <!-- 获取符合结果的总记录数 -->
  <select id="getTotal" parameterType="Map" resultType="Integer">
    select count(*) from literature_data
    <where>
      <if test="name != null">
        and name like '%${name}%'
      </if>
    </where>
  </select>
</mapper>
